import logging
from aiogram import *
from settings import TG_TOKEN
from data import ExchangeRate, CurrencyData
from random import sample
from exceptions import *


# –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TG_TOKEN)
# –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
dp = Dispatcher(bot)
# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(level=logging.INFO)


class BotExchanger:

    @classmethod
    def launch(cls):

        @dp.message_handler(commands='start')
        async def cmd_special_buttons(message: types.Message):

            keyboard = types.ReplyKeyboardMarkup(
                resize_keyboard=True,
                one_time_keyboard=True)
            keyboard.add(types.KeyboardButton(text='–ü–æ–º–æ—â—å'))

            await message.answer(f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç! '
                                 f'–≠—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –∫—É—Ä—Å–∞ SkillFactory. '
                                 f'–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: @pu6yc')
            await message.answer(f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ /help '
                                 f'–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"',
                                 reply_markup=keyboard)

        @dp.message_handler(commands='help')
        @dp.message_handler(text='–ü–æ–º–æ—â—å')
        async def show_help(message: types.Message):

            keyboard_example = types.InlineKeyboardMarkup()
            keyboard_example.row(
                types.InlineKeyboardButton(
                    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!',
                    callback_data='example'))
            keyboard_example.row(
                types.InlineKeyboardButton(
                    '–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã',
                    callback_data='common'))

            await message.answer(
                f'–ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –≤–∞–ª—é—Ç—É –≤ –¥—Ä—É–≥—É—é, '
                f'–≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ / –ø–æ –ø–æ—Ä—è–¥–∫—É: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã, '
                f'–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n'
                f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–∞–∫ —Ç—Ä—ë—Ö–±—É–∫–≤–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç:\n'
                f'<b>USD/EUR/10</b>\n'
                f'—Ç–∞–∫ –∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:\n'
                f'<b>–î–æ–ª–ª–∞—Ä –°–®–ê/–ï–≤—Ä–æ/10</b>',
                reply_markup=keyboard_example, parse_mode='HTML')

        # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        @dp.callback_query_handler(text='example')
        async def show_example(call: types.CallbackQuery):
            from_, to_ = sample(log.most_common, 2)
            cur_iso = CurrencyData().get_available('iso')
            res = ExchangeRate(from_, to_, Decimal('4.2'))
            from_rus = cur_iso.get(from_).title()
            to_rus = cur_iso.get(to_).title()

            await call.message.answer(f"<b>–ó–∞–ø—Ä–æ—Å:</b>\n{from_}/{to_}/4.2", parse_mode='HTML')
            await call.message.answer(f"{Decimal('4.2')} {from_rus} ({from_.upper()}) = "
                                      f"{res.converter()} {to_rus} ({to_.upper()})")

        # –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        @dp.callback_query_handler(text='common')
        async def get_common(call: types.CallbackQuery):
            cur_iso = CurrencyData().get_available('iso')
            common_list = []

            for currency in log.most_common:
                common_list.append(f'üî∏ {cur_iso.get(currency).title()} ({currency.upper()})')

            await call.message.answer('\n'.join(common_list))

        # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        @dp.message_handler(content_types='text')
        async def user_request(message: types.Message):
            r = CheckRequest(message.text).do_check()

            if r['errors'] == {None}:
                cur_iso = CurrencyData().get_available('iso')
                res = ExchangeRate(r['from'], r['to'], r['amount'])
                from_rus = cur_iso.get(r['from']).title()
                to_rus = cur_iso.get(r['to']).title()

                await message.answer(f"{r['amount']} {from_rus} ({r['from'].upper()}) = "
                                     f"{res.converter()} {to_rus} ({r['to'].upper()})")
                # –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
                log.most_common = r['from'], r['to']
            else:
                await message.answer('\n'.join(r['errors']))

        log = ConverterLog()
        executor.start_polling(dp, skip_updates=True)


class ConverterLog:

    def __init__(self):
        self.common = {}

    @property
    def most_common(self):
        if not self.common:
            base_currency = ('usd', 'eur', 'rub', 'jpy', 'gbp', 'chf')
            for currency in base_currency:
                self.common[currency] = 10
        return sorted(self.common, reverse=True, key=self.common.get)[:10]

    @most_common.setter
    def most_common(self, currency_used: tuple):
        for c in currency_used:
            self.common[c] = self.common.get(c, 0) + 1


if __name__ == '__main__':
    BotExchanger.launch()
